{"ast":null,"code":"var _jsxFileName = \"/Users/ohayoung/Projects/aa_practice/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom'; // React Router를 사용할 경우\nimport { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api = process.env.REACT_APP_BACKEND_URL;\nconst App = () => {\n  _s();\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [idToken, setIdToken] = useState(null);\n  const [idTokenInfo1, setIdTokenInfo1] = useState(null);\n  const location = useLocation();\n  const navigate = useNavigate(); // useNavigate 훅 사용\n\n  useEffect(() => {\n    // 1초마다 시간을 업데이트\n    const intervalId = setInterval(() => {\n      setCurrentTime(new Date().toISOString());\n    }, 1000);\n\n    // 컴포넌트가 언마운트될 때 인터벌을 클리어\n    return () => clearInterval(intervalId);\n  }, []);\n\n  // Login handling\n  const handleLoginSuccess = async credentialResponse => {\n    console.log('Login Success:', credentialResponse);\n    setIdToken(credentialResponse.credential);\n    try {\n      const response = await fetch(api + '/api/auth/verify/idtoken/google', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: idToken\n        })\n      });\n      const data = await response.json();\n      console.log(data);\n      if (data.status === 'success') {\n        console.log(data.user);\n        setIdTokenInfo1(data.user);\n      } else {\n        console.error('Token verification failed');\n      }\n    } catch (error) {\n      console.error('Error verifying token:', error);\n    }\n  };\n  const handleLoginError = () => {\n    console.error('Login Failed');\n  };\n  const verifyIdTokenByGoogle = async () => {\n    if (!idToken) {\n      console.error('No id token available');\n      return;\n    }\n    try {\n      const response = await fetch(api + '/api/auth/verify/idtoken/google', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: idToken\n        })\n      });\n      const data = await response.json();\n      console.log(data);\n      if (data.status === 'success') {\n        console.log(data.user);\n        setIdTokenInfo1(data.user);\n      } else {\n        console.error('Token verification failed');\n      }\n    } catch (error) {\n      console.error('Error verifying token:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\",\n          marginTop: \"50px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Current UTC Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: currentTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GoogleOAuthProvider, {\n        clientId: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Account Abstraction with Google OAuth 2.0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uAD6C\\uAE00 \\uB85C\\uADF8\\uC778 \\uD558\\uC5EC \\uACC4\\uC815 \\uC0DD\\uC131 \\u2B07\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n          onSuccess: handleLoginSuccess,\n          onError: handleLoginError\n          // useOneTap\n          ,\n          flow: \"auth-code\",\n          scope: \"openid profile email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"ID token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), idToken ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: idToken\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 20\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"null\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 39\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"userInfo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), idTokenInfo1 ? /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(idTokenInfo1, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"null\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 78\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Verify ID Token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: verifyIdTokenByGoogle,\n        style: {\n          marginRight: '10px'\n        },\n        children: \"\\uAD6C\\uAE00 \\uC5D4\\uB4DC\\uD3EC\\uC778\\uD2B8\\uB97C \\uD1B5\\uD55C id token \\uAC80\\uC99D \\uC694\\uCCAD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), idTokenInfo1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Result of ID Token Validation By Google\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(idTokenInfo1, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"og0XlZFOM98EvQBmXqOIGFRHXqA=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","GoogleOAuthProvider","GoogleLogin","jsxDEV","_jsxDEV","api","process","env","REACT_APP_BACKEND_URL","App","_s","currentTime","setCurrentTime","Date","idToken","setIdToken","idTokenInfo1","setIdTokenInfo1","location","navigate","intervalId","setInterval","toISOString","clearInterval","handleLoginSuccess","credentialResponse","console","log","credential","response","fetch","method","headers","body","JSON","stringify","token","data","json","status","user","error","handleLoginError","verifyIdTokenByGoogle","children","style","textAlign","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","clientId","REACT_APP_GOOGLE_CLIENT_ID","onSuccess","onError","flow","scope","onClick","marginRight","_c","$RefreshReg$"],"sources":["/Users/ohayoung/Projects/aa_practice/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom'; // React Router를 사용할 경우\nimport { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\n\nconst api = process.env.REACT_APP_BACKEND_URL;\n\nconst App = () => {\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [idToken, setIdToken] = useState(null);\n  const [idTokenInfo1, setIdTokenInfo1] = useState(null);\n\n  const location = useLocation();\n  const navigate = useNavigate(); // useNavigate 훅 사용\n  \n  useEffect(() => {\n    // 1초마다 시간을 업데이트\n    const intervalId = setInterval(() => {\n      setCurrentTime(new Date().toISOString());\n    }, 1000);\n\n    // 컴포넌트가 언마운트될 때 인터벌을 클리어\n    return () => clearInterval(intervalId);\n  }, []);\n\n\n  // Login handling\n  const handleLoginSuccess = async (credentialResponse) => {\n    console.log('Login Success:', credentialResponse);\n    setIdToken(credentialResponse.credential);\n    \n    try {\n      const response = await fetch(api + '/api/auth/verify/idtoken/google', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ token: idToken })\n      });\n\n      const data = await response.json();\n      console.log(data);\n\n      if (data.status === 'success') {\n        console.log(data.user)\n        setIdTokenInfo1(data.user);\n      } else {\n        console.error('Token verification failed');\n      }\n    } catch (error) {\n      console.error('Error verifying token:', error);\n    }\n  };\n\n  const handleLoginError = () => {\n    console.error('Login Failed');\n  };\n\n  const verifyIdTokenByGoogle = async () => {\n    if (!idToken) {\n      console.error('No id token available');\n      return;\n    }\n\n    try {\n      const response = await fetch(api + '/api/auth/verify/idtoken/google', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ token: idToken })\n      });\n\n      const data = await response.json();\n      console.log(data);\n\n      if (data.status === 'success') {\n        console.log(data.user)\n        setIdTokenInfo1(data.user);\n      } else {\n        console.error('Token verification failed');\n      }\n    } catch (error) {\n      console.error('Error verifying token:', error);\n    }\n}\n\n  return (\n    <div>\n      <div>\n        <div style={{ textAlign: \"center\", marginTop: \"50px\" }}>\n          <h1>Current UTC Time</h1>\n          <h2>{currentTime}</h2>\n        </div>\n        <GoogleOAuthProvider clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}>\n          <h1>Account Abstraction with Google OAuth 2.0</h1>\n          <p>구글 로그인 하여 계정 생성 ⬇️</p>\n          <GoogleLogin\n            onSuccess={handleLoginSuccess}\n            onError={handleLoginError}\n            // useOneTap\n            flow=\"auth-code\"\n            scope=\"openid profile email\"\n          />\n          <br />\n        </GoogleOAuthProvider>\n      </div>\n      <div>\n        <h3>ID token</h3>\n        {idToken ? <p>{idToken}</p> : <p>null</p>}\n        <h3>userInfo</h3>\n        {idTokenInfo1 ? <pre>{JSON.stringify(idTokenInfo1, null, 2)}</pre> : <p>null</p>}\n      </div>\n      <div>\n        {/* 검증 요청 버튼 */}\n        <h3>Verify ID Token</h3>\n        <button onClick={verifyIdTokenByGoogle} style={{ marginRight: '10px' }}>구글 엔드포인트를 통한 id token 검증 요청</button>\n        {/* 검증 결과 표시 */}\n        {idTokenInfo1 && (\n        <div>\n          <p>Result of ID Token Validation By Google</p>\n          <pre>{JSON.stringify(idTokenInfo1, null, 2)}</pre>\n        </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}