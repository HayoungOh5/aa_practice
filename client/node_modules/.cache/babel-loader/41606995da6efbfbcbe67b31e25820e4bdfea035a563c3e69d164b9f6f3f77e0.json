{"ast":null,"code":"var _jsxFileName = \"/Users/ohayoung/Projects/aa_practice/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom'; // React Router를 사용할 경우\nimport { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api = process.env.REACT_APP_BACKEND_URL;\nconst App = () => {\n  _s();\n  const [idToken, setIdToken] = useState(null);\n  const [authCode, setAuthCode] = useState(null);\n  const [accessToken, setAccessToken] = useState('');\n  const [refreshToken, setRefreshToken] = useState('');\n  const [accessTokenInfo, setAccessTokenInfo] = useState(null);\n  const [idTokenInfo1, setIdTokenInfo1] = useState(null);\n  const [idTokenInfo2, setIdTokenInfo2] = useState(null);\n  const location = useLocation();\n  const navigate = useNavigate(); // useNavigate 훅 사용\n\n  useEffect(() => {\n    // URL 쿼리 파라미터에서 Authorization Code를 추출합니다.\n    const query = new URLSearchParams(location.search);\n    const code = query.get('auth_code'); // URL에서 auth_code를 추출\n\n    if (code) {\n      setAuthCode(code);\n      console.log('Authorization Code:', code);\n      // 인증 코드 처리 후 리디렉션\n      navigate('/', {\n        replace: true\n      }); // React Router를 통한 리디렉션\n    }\n  }, [location.search, navigate]);\n  const getAuthCode = clientId => {\n    const redirectUri = 'http://localhost:8080/api/callback';\n    const responseType = 'code'; // Authorization code flow\n    const scope = 'openid profile email'; // 요청할 범위\n    const accessType = 'offline'; // 리프레시 토큰을 포함하기 위한 옵션\n\n    const authUrl = `https://accounts.google.com/o/oauth2/auth?client_id=${clientId}&redirect_uri=${redirectUri}&response_type=${responseType}&scope=${scope}&access_type=${accessType}`;\n    window.location.href = authUrl; // 구글 인증 페이지로 리디렉션\n  };\n\n  // Login handling\n  const handleLoginSuccess = async credentialResponse => {\n    console.log('Login Success:', credentialResponse);\n    setIdToken(credentialResponse.credential);\n    try {\n      const response = await fetch(api + '/api/auth/verify/idtoken/google', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: idToken\n        })\n      });\n      const data = await response.json();\n      console.log(data);\n      if (data.status === 'success') {\n        console.log(data.user);\n        setIdTokenInfo1(data.user);\n      } else {\n        console.error('Token verification failed');\n      }\n    } catch (error) {\n      console.error('Error verifying token:', error);\n    }\n  };\n  const handleLoginError = () => {\n    console.error('Login Failed');\n  };\n\n  // issue access token, refresh token by Authorization Code at first time\n  // verify id token\n  const issueToken = async () => {\n    console.log(\"issue token by code\", authCode);\n    try {\n      const tokenResponse = await fetch(api + '/api/auth/tokens', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          code: authCode\n        })\n      });\n      const res = await tokenResponse.json();\n      if (res.status === \"success\") {\n        console.log(\"id token & access token & refresh token issued\");\n        console.log(`access token : ${res.accessToken}`);\n        console.log(`refresh token : ${res.refreshToken}`);\n        setRefreshToken(res.refreshToken);\n        setAccessToken(res.accessToken);\n        setIdToken(res.idToken);\n      } else {\n        console.error('Failed to issue tokens:', res);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // 리프레시 토큰을 사용하여 새로운 액세스 토큰을 요청하는 함수\n  const getNewAccessToken = async () => {\n    try {\n      // 리프레시 토큰을 요청 본문에 포함\n      const response = await fetch(api + '/api/auth/refresh', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          refreshToken: refreshToken // 실제 리프레시 토큰을 여기 넣어야 합니다.\n        })\n      });\n      const res = await response.json();\n      if (res.status === \"success\") {\n        console.log(\"get new accesstoken\");\n        console.log(`now access token is ${res.accessToken}`);\n        setRefreshToken(res.refreshToken);\n        setAccessToken(res.accessToken);\n      } else {\n        console.error('Failed to get new access tokens:', res);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Verify accessToken by Google Endpoint\n  const verifyAccessTokenByGoogle = async () => {\n    if (!accessToken) {\n      console.error('No access token available');\n      return;\n    }\n    try {\n      const response = await fetch(api + '/api/auth/verify/accesstoken', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: accessToken\n        })\n      });\n      const data = await response.json();\n      setAccessTokenInfo(data);\n      if (data.status === 'success') {\n        console.log('Token is valid:', data);\n      } else {\n        console.error('Token verification failed:', data.message);\n      }\n    } catch (error) {\n      console.error('Error verifying token:', error);\n    }\n  };\n  const verifyIdTokenByGoogle = async () => {\n    if (!idToken) {\n      console.error('No id token available');\n      return;\n    }\n    try {\n      const response = await fetch(api + '/api/auth/verify/idtoken/google', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: idToken\n        })\n      });\n      const data = await response.json();\n      console.log(data);\n      if (data.status === 'success') {\n        console.log(data.user);\n        setIdTokenInfo1(data.user);\n      } else {\n        console.error('Token verification failed');\n      }\n    } catch (error) {\n      console.error('Error verifying token:', error);\n    }\n  };\n\n  // by our server\n  const verifyIdTokenByServer = async () => {\n    if (!idToken) {\n      console.error('No id token available');\n      return;\n    }\n    try {\n      const response = await fetch(api + '/api/auth/verify/idtoken/server', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: idToken\n        })\n      });\n      const data = await response.json();\n      console.log(data);\n      if (data.status === 'success') {\n        console.log('Token is valid:', data);\n        setIdTokenInfo2(data.user);\n      } else {\n        console.error('Token verification failed:', data.message);\n      }\n    } catch (error) {\n      console.error('Error verifying token:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(GoogleOAuthProvider, {\n        clientId: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Account Abstraction with Google OAuth 2.0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uAD6C\\uAE00 \\uB85C\\uADF8\\uC778 \\uD558\\uC5EC \\uACC4\\uC815 \\uC0DD\\uC131 \\u2B07\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n          onSuccess: handleLoginSuccess,\n          onError: handleLoginError\n          // useOneTap\n          ,\n          flow: \"auth-code\",\n          scope: \"openid profile email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [authCode ? /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u2705 Log in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u26A0\\uFE0F Before Log in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 41\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: `Authorization Code : ${authCode}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: issueToken,\n        style: {\n          marginRight: '10px'\n        },\n        children: \"\\uCD5C\\uCD08 \\uD1A0\\uD070 \\uC774\\uC288\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getNewAccessToken,\n        children: \"\\uC0C8 \\uC561\\uC138\\uC2A4 \\uD1A0\\uD070\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"ID token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), idToken ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: idToken\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 20\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"null\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 39\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Access token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), accessToken ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: accessToken\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 24\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"null\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 47\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"refresh token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), refreshToken ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: refreshToken\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"null\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 49\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Verify Access Token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: verifyAccessTokenByGoogle,\n        style: {\n          marginRight: '10px'\n        },\n        children: \"\\uAD6C\\uAE00 \\uC5D4\\uB4DC\\uD3EC\\uC778\\uD2B8\\uB97C \\uD1B5\\uD55C Access token\\uAC80\\uC99D \\uC694\\uCCAD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), accessTokenInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Result of Access Token Validation By Google\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(accessTokenInfo, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Verify ID Token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: verifyIdTokenByGoogle,\n        style: {\n          marginRight: '10px'\n        },\n        children: \"\\uAD6C\\uAE00 \\uC5D4\\uB4DC\\uD3EC\\uC778\\uD2B8\\uB97C \\uD1B5\\uD55C id token \\uAC80\\uC99D \\uC694\\uCCAD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), idTokenInfo1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Result of ID Token Validation By Google\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(idTokenInfo1, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: verifyIdTokenByServer,\n        style: {\n          marginRight: '10px'\n        },\n        children: \"\\uC11C\\uBC84\\uB97C \\uD1B5\\uD55C id token \\uAC80\\uC99D \\uC694\\uCCAD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), idTokenInfo2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Result of ID Token Validation By Server\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(idTokenInfo2, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"S6undtj4r9iEjhn9fld9RZhDxKE=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","GoogleOAuthProvider","GoogleLogin","jsxDEV","_jsxDEV","api","process","env","REACT_APP_BACKEND_URL","App","_s","idToken","setIdToken","authCode","setAuthCode","accessToken","setAccessToken","refreshToken","setRefreshToken","accessTokenInfo","setAccessTokenInfo","idTokenInfo1","setIdTokenInfo1","idTokenInfo2","setIdTokenInfo2","location","navigate","query","URLSearchParams","search","code","get","console","log","replace","getAuthCode","clientId","redirectUri","responseType","scope","accessType","authUrl","window","href","handleLoginSuccess","credentialResponse","credential","response","fetch","method","headers","body","JSON","stringify","token","data","json","status","user","error","handleLoginError","issueToken","tokenResponse","res","getNewAccessToken","verifyAccessTokenByGoogle","message","verifyIdTokenByGoogle","verifyIdTokenByServer","children","REACT_APP_GOOGLE_CLIENT_ID","fileName","_jsxFileName","lineNumber","columnNumber","onSuccess","onError","flow","onClick","style","marginRight","_c","$RefreshReg$"],"sources":["/Users/ohayoung/Projects/aa_practice/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom'; // React Router를 사용할 경우\nimport { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\n\nconst api = process.env.REACT_APP_BACKEND_URL;\n\nconst App = () => {\n  const [idToken, setIdToken] = useState(null);\n  const [authCode, setAuthCode] = useState(null);\n  const [accessToken, setAccessToken] = useState('');\n  const [refreshToken, setRefreshToken] = useState('');\n  const [accessTokenInfo, setAccessTokenInfo] = useState(null);\n  const [idTokenInfo1, setIdTokenInfo1] = useState(null);\n  const [idTokenInfo2, setIdTokenInfo2] = useState(null);\n\n  const location = useLocation();\n  const navigate = useNavigate(); // useNavigate 훅 사용\n  \n  useEffect(() => {\n    // URL 쿼리 파라미터에서 Authorization Code를 추출합니다.\n    const query = new URLSearchParams(location.search);\n    const code = query.get('auth_code'); // URL에서 auth_code를 추출\n\n    if (code) {\n      setAuthCode(code);\n      console.log('Authorization Code:', code);\n      // 인증 코드 처리 후 리디렉션\n      navigate('/', { replace: true }); // React Router를 통한 리디렉션\n    }\n  }, [location.search, navigate]);\n\n  const getAuthCode = (clientId) => {\n    const redirectUri = 'http://localhost:8080/api/callback';\n    const responseType = 'code'; // Authorization code flow\n    const scope = 'openid profile email'; // 요청할 범위\n    const accessType = 'offline'; // 리프레시 토큰을 포함하기 위한 옵션\n\n    const authUrl = `https://accounts.google.com/o/oauth2/auth?client_id=${clientId}&redirect_uri=${redirectUri}&response_type=${responseType}&scope=${scope}&access_type=${accessType}`;\n\n    window.location.href = authUrl; // 구글 인증 페이지로 리디렉션\n  };\n\n  // Login handling\n  const handleLoginSuccess = async (credentialResponse) => {\n    console.log('Login Success:', credentialResponse);\n    setIdToken(credentialResponse.credential);\n    \n    try {\n      const response = await fetch(api + '/api/auth/verify/idtoken/google', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ token: idToken })\n      });\n\n      const data = await response.json();\n      console.log(data);\n\n      if (data.status === 'success') {\n        console.log(data.user)\n        setIdTokenInfo1(data.user);\n      } else {\n        console.error('Token verification failed');\n      }\n    } catch (error) {\n      console.error('Error verifying token:', error);\n    }\n  };\n\n  const handleLoginError = () => {\n    console.error('Login Failed');\n  };\n\n  // issue access token, refresh token by Authorization Code at first time\n  // verify id token\n  const issueToken = async () => {\n    console.log(\"issue token by code\", authCode)\n    try {\n      const tokenResponse = await fetch(api + '/api/auth/tokens', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ code: authCode })\n      });\n\n      const res = await tokenResponse.json();\n      if (res.status === \"success\") {\n        console.log(\"id token & access token & refresh token issued\");\n        console.log(`access token : ${res.accessToken}`);\n        console.log(`refresh token : ${res.refreshToken}`);\n        setRefreshToken(res.refreshToken);\n        setAccessToken(res.accessToken);\n        setIdToken(res.idToken);\n      } else {\n        console.error('Failed to issue tokens:', res);\n      }\n    } catch(error) {\n      console.error(error);\n    }\n  }\n\n  // 리프레시 토큰을 사용하여 새로운 액세스 토큰을 요청하는 함수\n  const getNewAccessToken = async () => {\n    try {\n      // 리프레시 토큰을 요청 본문에 포함\n      const response = await fetch(api + '/api/auth/refresh', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          refreshToken: refreshToken // 실제 리프레시 토큰을 여기 넣어야 합니다.\n        })\n      });\n\n      const res = await response.json();\n\n      if (res.status === \"success\") {\n        console.log(\"get new accesstoken\")\n        console.log(`now access token is ${res.accessToken}`)\n        setRefreshToken(res.refreshToken);\n        setAccessToken(res.accessToken);\n      } else {\n        console.error('Failed to get new access tokens:', res);\n      }\n    } catch(error) {\n      console.error(error);\n    }\n  };\n\n  // Verify accessToken by Google Endpoint\n  const verifyAccessTokenByGoogle = async () => {\n    if (!accessToken) {\n      console.error('No access token available');\n      return;\n    }\n\n    try {\n      const response = await fetch(api + '/api/auth/verify/accesstoken', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ token: accessToken }),\n      });\n\n      const data = await response.json();\n      setAccessTokenInfo(data);\n\n      if (data.status === 'success') {\n        console.log('Token is valid:', data);\n      } else {\n        console.error('Token verification failed:', data.message);\n      }\n    } catch (error) {\n      console.error('Error verifying token:', error);\n    }\n  };\n\n  const verifyIdTokenByGoogle = async () => {\n    if (!idToken) {\n      console.error('No id token available');\n      return;\n    }\n\n    try {\n      const response = await fetch(api + '/api/auth/verify/idtoken/google', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ token: idToken })\n      });\n\n      const data = await response.json();\n      console.log(data);\n\n      if (data.status === 'success') {\n        console.log(data.user)\n        setIdTokenInfo1(data.user);\n      } else {\n        console.error('Token verification failed');\n      }\n    } catch (error) {\n      console.error('Error verifying token:', error);\n    }\n}\n\n  // by our server\n  const verifyIdTokenByServer = async () => {\n    if (!idToken) {\n      console.error('No id token available');\n      return;\n    }\n\n    try {\n      const response = await fetch(api + '/api/auth/verify/idtoken/server', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ token: idToken }),\n      });\n\n      const data = await response.json();\n      console.log(data);\n\n      if (data.status === 'success') {\n        console.log('Token is valid:', data);\n        setIdTokenInfo2(data.user);\n      } else {\n        console.error('Token verification failed:', data.message);\n      }\n    } catch (error) {\n      console.error('Error verifying token:', error);\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        <GoogleOAuthProvider clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}>\n            <h1>Account Abstraction with Google OAuth 2.0</h1>\n            <p>구글 로그인 하여 계정 생성 ⬇️</p>\n            <GoogleLogin\n              onSuccess={handleLoginSuccess}\n              onError={handleLoginError}\n              // useOneTap\n              flow=\"auth-code\"\n              scope=\"openid profile email\"\n            />\n            <br />\n        </GoogleOAuthProvider>\n      </div>\n      <div>\n        {authCode ? <h3>✅ Log in</h3> : <h3>⚠️ Before Log in</h3>}\n        <h4>{`Authorization Code : ${authCode}`}</h4>\n      </div>\n      <div>\n        <button onClick={issueToken} style={{ marginRight: '10px' }}>최초 토큰 이슈</button>\n        <button onClick={getNewAccessToken}>새 액세스 토큰</button>\n      </div>\n      <div>\n        <h3>ID token</h3>\n        {idToken ? <p>{idToken}</p> : <p>null</p>}\n        <h3>Access token</h3>\n        {accessToken ? <p>{accessToken}</p> : <p>null</p>}\n        <h3>refresh token</h3>\n        {refreshToken ? <p>{refreshToken}</p> : <p>null</p>}  \n      </div>\n      <div>\n        {/* 검증 요청 버튼 */}\n        <h3>Verify Access Token</h3>\n        <button onClick={verifyAccessTokenByGoogle} style={{ marginRight: '10px' }}>구글 엔드포인트를 통한 Access token검증 요청</button>\n        {/* 검증 결과 표시 */}\n        {accessTokenInfo && (\n        <div>\n          <p>Result of Access Token Validation By Google</p>\n          <pre>{JSON.stringify(accessTokenInfo, null, 2)}</pre>\n        </div>\n        )}\n      </div>\n      <div>\n        {/* 검증 요청 버튼 */}\n        <h3>Verify ID Token</h3>\n        <button onClick={verifyIdTokenByGoogle} style={{ marginRight: '10px' }}>구글 엔드포인트를 통한 id token 검증 요청</button>\n        {/* 검증 결과 표시 */}\n        {idTokenInfo1 && (\n        <div>\n          <p>Result of ID Token Validation By Google</p>\n          <pre>{JSON.stringify(idTokenInfo1, null, 2)}</pre>\n        </div>\n        )}\n        <button onClick={verifyIdTokenByServer} style={{ marginRight: '10px' }}>서버를 통한 id token 검증 요청</button>\n        {/* 검증 결과 표시 */}\n        {idTokenInfo2 && (\n        <div>\n          <p>Result of ID Token Validation By Server</p>\n          <pre>{JSON.stringify(idTokenInfo2, null, 2)}</pre>\n        </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}