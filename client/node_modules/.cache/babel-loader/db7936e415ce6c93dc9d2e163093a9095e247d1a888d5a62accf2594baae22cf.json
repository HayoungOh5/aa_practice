{"ast":null,"code":"var _jsxFileName = \"/Users/ohayoung/Projects/aa_practice/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom'; // React Router를 사용할 경우\nimport { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api = process.env.REACT_APP_BACKEND_URL;\nconst App = () => {\n  _s();\n  const [idToken, setIdToken] = useState(null);\n  const [authCode, setAuthCode] = useState(null);\n  const [accessToken, setAccessToken] = useState('');\n  const [refreshToken, setRefreshToken] = useState('');\n  const [accessTokenInfo, setAccessTokenInfo] = useState(null);\n  const [idTokenInfo1, setIdTokenInfo1] = useState(null);\n  const [idTokenInfo2, setIdTokenInfo2] = useState(null);\n  const location = useLocation();\n  const navigate = useNavigate(); // useNavigate 훅 사용\n\n  useEffect(() => {\n    // URL 쿼리 파라미터에서 Authorization Code를 추출합니다.\n    const query = new URLSearchParams(location.search);\n    const code = query.get('auth_code'); // URL에서 auth_code를 추출\n\n    if (code) {\n      setAuthCode(code);\n      console.log('Authorization Code:', code);\n      // 인증 코드 처리 후 리디렉션\n      navigate('/', {\n        replace: true\n      }); // React Router를 통한 리디렉션\n    }\n  }, [location.search, navigate]);\n  const getAuthCode = clientId => {\n    const redirectUri = 'http://localhost:8080/api/callback';\n    const responseType = 'code'; // Authorization code flow\n    const scope = 'openid profile email'; // 요청할 범위\n    const accessType = 'offline'; // 리프레시 토큰을 포함하기 위한 옵션\n\n    const authUrl = `https://accounts.google.com/o/oauth2/auth?client_id=${clientId}&redirect_uri=${redirectUri}&response_type=${responseType}&scope=${scope}&access_type=${accessType}`;\n    window.location.href = authUrl; // 구글 인증 페이지로 리디렉션\n  };\n\n  // issue access token, refresh token by Authorization Code at first time\n  // verify id token\n  const issueToken = async () => {\n    console.log(\"issue token by code\", authCode);\n    try {\n      const tokenResponse = await fetch(api + '/api/auth/tokens', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          code: authCode\n        })\n      });\n      const res = await tokenResponse.json();\n      if (res.status === \"success\") {\n        console.log(\"id token & access token & refresh token issued\");\n        console.log(`access token : ${res.accessToken}`);\n        console.log(`refresh token : ${res.refreshToken}`);\n        setRefreshToken(res.refreshToken);\n        setAccessToken(res.accessToken);\n        setIdToken(res.idToken);\n      } else {\n        console.error('Failed to issue tokens:', res);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // 리프레시 토큰을 사용하여 새로운 액세스 토큰을 요청하는 함수\n  const getNewAccessToken = async () => {\n    try {\n      // 리프레시 토큰을 요청 본문에 포함\n      const response = await fetch(api + '/api/auth/refresh', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          refreshToken: refreshToken // 실제 리프레시 토큰을 여기 넣어야 합니다.\n        })\n      });\n      const res = await response.json();\n      if (res.status === \"success\") {\n        console.log(\"get new accesstoken\");\n        console.log(`now access token is ${res.accessToken}`);\n        setRefreshToken(res.refreshToken);\n        setAccessToken(res.accessToken);\n      } else {\n        console.error('Failed to get new access tokens:', res);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Verify accessToken by Google Endpoint\n  const verifyAccessTokenByGoogle = async () => {\n    if (!accessToken) {\n      console.error('No access token available');\n      return;\n    }\n    try {\n      const response = await fetch(api + '/api/auth/verify/accesstoken', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: accessToken\n        })\n      });\n      const data = await response.json();\n      setAccessTokenInfo(data);\n      if (data.status === 'success') {\n        console.log('Token is valid:', data);\n      } else {\n        console.error('Token verification failed:', data.message);\n      }\n    } catch (error) {\n      console.error('Error verifying token:', error);\n    }\n  };\n  const verifyIdTokenByGoogle = async () => {\n    if (!idToken) {\n      console.error('No id token available');\n      return;\n    }\n    try {\n      const response = await fetch(api + '/api/auth/verify/idtoken/google', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: idToken\n        })\n      });\n      const data = await response.json();\n      console.log(data);\n      if (data.status === 'success') {\n        console.log(data.user);\n        setIdTokenInfo1(data.user);\n      } else {\n        console.error('Token verification failed');\n      }\n    } catch (error) {\n      console.error('Error verifying token:', error);\n    }\n  };\n\n  // by our server\n  const verifyIdTokenByServer = async () => {\n    if (!idToken) {\n      console.error('No id token available');\n      return;\n    }\n    try {\n      const response = await fetch(api + '/api/auth/verify/idtoken/server', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: idToken\n        })\n      });\n      const data = await response.json();\n      console.log(data);\n      if (data.status === 'success') {\n        console.log('Token is valid:', data);\n        setIdTokenInfo2(data.user);\n      } else {\n        console.error('Token verification failed:', data.message);\n      }\n    } catch (error) {\n      console.error('Error verifying token:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(GoogleOAuthProvider, {\n        clientId: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Google OAuth 2.0 Login BY COMPONENT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n          onSuccess: handleLoginSuccess,\n          onError: handleLoginError\n          // useOneTapå\n          ,\n          flow: \"auth-code\",\n          scope: \"openid profile email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [authCode ? /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u2705 Log in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u26A0\\uFE0F Before Log in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 41\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: `Authorization Code : ${authCode}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: issueToken,\n        style: {\n          marginRight: '10px'\n        },\n        children: \"\\uCD5C\\uCD08 \\uD1A0\\uD070 \\uC774\\uC288\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getNewAccessToken,\n        children: \"\\uC0C8 \\uC561\\uC138\\uC2A4 \\uD1A0\\uD070\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"ID token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), idToken ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: idToken\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 20\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"null\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 39\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Access token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), accessToken ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: accessToken\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 24\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"null\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 47\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"refresh token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), refreshToken ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: refreshToken\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"null\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 49\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Verify Access Token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: verifyAccessTokenByGoogle,\n        style: {\n          marginRight: '10px'\n        },\n        children: \"\\uAD6C\\uAE00 \\uC5D4\\uB4DC\\uD3EC\\uC778\\uD2B8\\uB97C \\uD1B5\\uD55C Access token\\uAC80\\uC99D \\uC694\\uCCAD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), accessTokenInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Result of Access Token Validation By Google\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(accessTokenInfo, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Verify ID Token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: verifyIdTokenByGoogle,\n        style: {\n          marginRight: '10px'\n        },\n        children: \"\\uAD6C\\uAE00 \\uC5D4\\uB4DC\\uD3EC\\uC778\\uD2B8\\uB97C \\uD1B5\\uD55C id token \\uAC80\\uC99D \\uC694\\uCCAD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), idTokenInfo1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Result of ID Token Validation By Google\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(idTokenInfo1, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: verifyIdTokenByServer,\n        style: {\n          marginRight: '10px'\n        },\n        children: \"\\uC11C\\uBC84\\uB97C \\uD1B5\\uD55C id token \\uAC80\\uC99D \\uC694\\uCCAD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), idTokenInfo2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Result of ID Token Validation By Server\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(idTokenInfo2, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"S6undtj4r9iEjhn9fld9RZhDxKE=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","GoogleOAuthProvider","GoogleLogin","jsxDEV","_jsxDEV","api","process","env","REACT_APP_BACKEND_URL","App","_s","idToken","setIdToken","authCode","setAuthCode","accessToken","setAccessToken","refreshToken","setRefreshToken","accessTokenInfo","setAccessTokenInfo","idTokenInfo1","setIdTokenInfo1","idTokenInfo2","setIdTokenInfo2","location","navigate","query","URLSearchParams","search","code","get","console","log","replace","getAuthCode","clientId","redirectUri","responseType","scope","accessType","authUrl","window","href","issueToken","tokenResponse","fetch","method","headers","body","JSON","stringify","res","json","status","error","getNewAccessToken","response","verifyAccessTokenByGoogle","token","data","message","verifyIdTokenByGoogle","user","verifyIdTokenByServer","children","REACT_APP_GOOGLE_CLIENT_ID","fileName","_jsxFileName","lineNumber","columnNumber","onSuccess","handleLoginSuccess","onError","handleLoginError","flow","onClick","style","marginRight","_c","$RefreshReg$"],"sources":["/Users/ohayoung/Projects/aa_practice/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom'; // React Router를 사용할 경우\nimport { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\n\nconst api = process.env.REACT_APP_BACKEND_URL;\n\nconst App = () => {\n  const [idToken, setIdToken] = useState(null);\n  const [authCode, setAuthCode] = useState(null);\n  const [accessToken, setAccessToken] = useState('');\n  const [refreshToken, setRefreshToken] = useState('');\n  const [accessTokenInfo, setAccessTokenInfo] = useState(null);\n  const [idTokenInfo1, setIdTokenInfo1] = useState(null);\n  const [idTokenInfo2, setIdTokenInfo2] = useState(null);\n\n  const location = useLocation();\n  const navigate = useNavigate(); // useNavigate 훅 사용\n  \n  useEffect(() => {\n    // URL 쿼리 파라미터에서 Authorization Code를 추출합니다.\n    const query = new URLSearchParams(location.search);\n    const code = query.get('auth_code'); // URL에서 auth_code를 추출\n\n    if (code) {\n      setAuthCode(code);\n      console.log('Authorization Code:', code);\n      // 인증 코드 처리 후 리디렉션\n      navigate('/', { replace: true }); // React Router를 통한 리디렉션\n    }\n  }, [location.search, navigate]);\n\n  const getAuthCode = (clientId) => {\n    const redirectUri = 'http://localhost:8080/api/callback';\n    const responseType = 'code'; // Authorization code flow\n    const scope = 'openid profile email'; // 요청할 범위\n    const accessType = 'offline'; // 리프레시 토큰을 포함하기 위한 옵션\n\n    const authUrl = `https://accounts.google.com/o/oauth2/auth?client_id=${clientId}&redirect_uri=${redirectUri}&response_type=${responseType}&scope=${scope}&access_type=${accessType}`;\n\n    window.location.href = authUrl; // 구글 인증 페이지로 리디렉션\n  };\n\n  // issue access token, refresh token by Authorization Code at first time\n  // verify id token\n  const issueToken = async () => {\n    console.log(\"issue token by code\", authCode)\n    try {\n      const tokenResponse = await fetch(api + '/api/auth/tokens', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ code: authCode })\n      });\n\n      const res = await tokenResponse.json();\n      if (res.status === \"success\") {\n        console.log(\"id token & access token & refresh token issued\");\n        console.log(`access token : ${res.accessToken}`);\n        console.log(`refresh token : ${res.refreshToken}`);\n        setRefreshToken(res.refreshToken);\n        setAccessToken(res.accessToken);\n        setIdToken(res.idToken);\n      } else {\n        console.error('Failed to issue tokens:', res);\n      }\n    } catch(error) {\n      console.error(error);\n    }\n  }\n\n  // 리프레시 토큰을 사용하여 새로운 액세스 토큰을 요청하는 함수\n  const getNewAccessToken = async () => {\n    try {\n      // 리프레시 토큰을 요청 본문에 포함\n      const response = await fetch(api + '/api/auth/refresh', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          refreshToken: refreshToken // 실제 리프레시 토큰을 여기 넣어야 합니다.\n        })\n      });\n\n      const res = await response.json();\n\n      if (res.status === \"success\") {\n        console.log(\"get new accesstoken\")\n        console.log(`now access token is ${res.accessToken}`)\n        setRefreshToken(res.refreshToken);\n        setAccessToken(res.accessToken);\n      } else {\n        console.error('Failed to get new access tokens:', res);\n      }\n    } catch(error) {\n      console.error(error);\n    }\n  };\n\n  // Verify accessToken by Google Endpoint\n  const verifyAccessTokenByGoogle = async () => {\n    if (!accessToken) {\n      console.error('No access token available');\n      return;\n    }\n\n    try {\n      const response = await fetch(api + '/api/auth/verify/accesstoken', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ token: accessToken }),\n      });\n\n      const data = await response.json();\n      setAccessTokenInfo(data);\n\n      if (data.status === 'success') {\n        console.log('Token is valid:', data);\n      } else {\n        console.error('Token verification failed:', data.message);\n      }\n    } catch (error) {\n      console.error('Error verifying token:', error);\n    }\n  };\n\n  const verifyIdTokenByGoogle = async () => {\n    if (!idToken) {\n      console.error('No id token available');\n      return;\n    }\n\n    try {\n      const response = await fetch(api + '/api/auth/verify/idtoken/google', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ token: idToken })\n      });\n\n      const data = await response.json();\n      console.log(data);\n\n      if (data.status === 'success') {\n        console.log(data.user)\n        setIdTokenInfo1(data.user);\n      } else {\n        console.error('Token verification failed');\n      }\n    } catch (error) {\n      console.error('Error verifying token:', error);\n    }\n}\n\n  // by our server\n  const verifyIdTokenByServer = async () => {\n    if (!idToken) {\n      console.error('No id token available');\n      return;\n    }\n\n    try {\n      const response = await fetch(api + '/api/auth/verify/idtoken/server', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ token: idToken }),\n      });\n\n      const data = await response.json();\n      console.log(data);\n\n      if (data.status === 'success') {\n        console.log('Token is valid:', data);\n        setIdTokenInfo2(data.user);\n      } else {\n        console.error('Token verification failed:', data.message);\n      }\n    } catch (error) {\n      console.error('Error verifying token:', error);\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        <GoogleOAuthProvider clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}>\n            <h1>Google OAuth 2.0 Login BY COMPONENT</h1>\n            <GoogleLogin\n              onSuccess={handleLoginSuccess}\n              onError={handleLoginError}\n              // useOneTapå\n              flow=\"auth-code\"\n              scope=\"openid profile email\"\n            />\n            <br />\n        </GoogleOAuthProvider>\n      </div>\n      <div>\n        {authCode ? <h3>✅ Log in</h3> : <h3>⚠️ Before Log in</h3>}\n        <h4>{`Authorization Code : ${authCode}`}</h4>\n      </div>\n      <div>\n        <button onClick={issueToken} style={{ marginRight: '10px' }}>최초 토큰 이슈</button>\n        <button onClick={getNewAccessToken}>새 액세스 토큰</button>\n      </div>\n      <div>\n        <h3>ID token</h3>\n        {idToken ? <p>{idToken}</p> : <p>null</p>}\n        <h3>Access token</h3>\n        {accessToken ? <p>{accessToken}</p> : <p>null</p>}\n        <h3>refresh token</h3>\n        {refreshToken ? <p>{refreshToken}</p> : <p>null</p>}  \n      </div>\n      <div>\n        {/* 검증 요청 버튼 */}\n        <h3>Verify Access Token</h3>\n        <button onClick={verifyAccessTokenByGoogle} style={{ marginRight: '10px' }}>구글 엔드포인트를 통한 Access token검증 요청</button>\n        {/* 검증 결과 표시 */}\n        {accessTokenInfo && (\n        <div>\n          <p>Result of Access Token Validation By Google</p>\n          <pre>{JSON.stringify(accessTokenInfo, null, 2)}</pre>\n        </div>\n        )}\n      </div>\n      <div>\n        {/* 검증 요청 버튼 */}\n        <h3>Verify ID Token</h3>\n        <button onClick={verifyIdTokenByGoogle} style={{ marginRight: '10px' }}>구글 엔드포인트를 통한 id token 검증 요청</button>\n        {/* 검증 결과 표시 */}\n        {idTokenInfo1 && (\n        <div>\n          <p>Result of ID Token Validation By Google</p>\n          <pre>{JSON.stringify(idTokenInfo1, null, 2)}</pre>\n        </div>\n        )}\n        <button onClick={verifyIdTokenByServer} style={{ marginRight: '10px' }}>서버를 통한 id token 검증 요청</button>\n        {/* 검증 결과 표시 */}\n        {idTokenInfo2 && (\n        <div>\n          <p>Result of ID Token Validation By Server</p>\n          <pre>{JSON.stringify(idTokenInfo2, null, 2)}</pre>\n        </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}